Analyzing Data with Pandas and Visualizing Results with Matplotlib

Descriptio
This guide covers how to:  
1. Load and analyze data** using **Pandas** (Python’s powerful data manipulation library).  
2. Visualize insights** using **Matplotlib** (Python’s go-to plotting library).  

Perfect for **data exploration, cleaning, and presentation**—whether you're working with **CSV files, databases, or APIs**.  



Step 1: Install Required Libraries
bash
pip install pandas matplotlib



Step 2: Load & Analyze Data with Pandas
Example: Load a CSV file  
python
import pandas as pd

Load dataset (e.g., from CSV)
df = pd.read_csv("data.csv")  

 Basic analysis
print(df.head())       # First 5 rows
print(df.describe())   # Statistical summary
print(df.info())       # Data types & missing values
```

Common Pandas Operations**  
| Task | Code |
|------|------|
| Filter rows | `df[df['column'] > 50]` |
| Group data | `df.groupby('category').mean()` |
| Handle missing values | `df.dropna()` or `df.fillna(0)` |
| Sort data | `df.sort_values('column', ascending=False)` |



step 3: Visualize Data with Matplotlib**  
xample: Create a Line Plot**  
python
import matplotlib.pyplot as plt

 Plot sales over time
plt.plot(df['date'], df['sales'], label='Sales', color='blue', marker='o')
plt.title("Sales Over Time")
plt.xlabel("Date")
plt.ylabel("Sales ($)")
plt.legend()
plt.grid(True)
plt.show()
```

Common Matplotlib Plots  
| Plot Type | Code |
|-----------|------|
| Bar Chart | `plt.bar(df['x'], df['y'])` |
| Histogram | `plt.hist(df['values'], bins=10)` |
| Scatter Plot | `plt.scatter(df['x'], df['y'])` |
| Pie Chart | `plt.pie(df['sizes'], labels=df['labels'])` |


Step 4: Advanced Tips
Combine Pandas & Matplotlib
python
 Pandas built-in plotting (uses Matplotlib under the hood)
df.plot(kind='line', x='date', y='sales', title='Sales Trend')
plt.show()

Save Plots to Files
python
plt.savefig("sales_plot.png", dpi=300, bbox_inches='tight')

Customize Plots
python
plt.style.use('ggplot')  # Professional style
plt.figure(figsize=(10, 6))  # Adjust size

Final Workflow
1. **Load data** → `pd.read_csv()`  
2. **Clean/analyze** → `df.dropna()`, `df.groupby()`  
3. **Visualize** → `plt.plot()`, `plt.bar()`  
4. **Save/share** → `plt.savefig()`  
# **Advanced Data Analysis & Visualization with Pandas & Matplotlib**  
*(With Error Handling, Custom Styling, and Real Dataset Examples)*  


1. Dataset Selection & Loading**  
Option 1: Load the Iris Dataset (Built-in)**
python
from sklearn.datasets import load_iris
import pandas as pd

Load Iris dataset
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['target'] = iris.target  # Add target column (flower species)
print(df.head())


Option 2: Load from CSV (With Error Handling)**
python
import pandas as pd

try:
    df = pd.read_csv("your_dataset.csv")  # Replace with your file
    print("Data loaded successfully!")
except FileNotFoundError:
    print("Error: File not found. Check the path.")
except Exception as e:
    print(f"An error occurred: {e}")




2. Data Cleaning & Analysis  
Handling Missing Data
python
Check for missing values
print(df.isnull().sum())

 Drop or fill missing values
df_cleaned = df.dropna()  # Remove rows with NaN
 OR
df_filled = df.fillna(0)  # Fill NaN with zeros


Statistical Summary
python
print(df.describe())  # Basic stats (mean, std, min, max)
print(df['target'].value_counts())  # Count unique values


3. Advanced Visualization
Using Matplotlib (Customized)
python
import matplotlib.pyplot as plt

Custom style
plt.style.use('seaborn')  # More professional look

Scatter plot (Sepal Length vs Width)
plt.figure(figsize=(10, 6))
plt.scatter(
    df['sepal length (cm)'],
    df['sepal width (cm)'],
    c=df['target'],  # Color by species
    cmap='viridis',
    alpha=0.7
)
plt.title("Iris Dataset: Sepal Length vs Width", fontsize=14)
plt.xlabel("Sepal Length (cm)", fontsize=12)
plt.ylabel("Sepal Width (cm)", fontsize=12)
plt.colorbar(label='Species')
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()


Using Seaborn (Enhanced Styling)**
python
import seaborn as sns

 Boxplot (Distribution by Species)
plt.figure(figsize=(10, 6))
sns.boxplot(
    x='target',
    y='petal length (cm)',
    data=df,
    palette='pastel'
)
plt.title("Petal Length Distribution by Species", fontsize=14)
plt.xlabel("Species", fontsize=12)
plt.ylabel("Petal Length (cm)", fontsize=12)
plt.xticks(ticks=[0, 1, 2], labels=iris.target_names)
plt.show()


 Saving Plots
python
plt.savefig("iris_scatter_plot.png", dpi=300, bbox_inches='tight')


4. Key Insights from the Iris Dataset**  
Observation 1:** Setosa flowers have smaller petals but wider sepals.  
Observation 2:** Virginica has the longest petals on average.  
Observation 3:** Versicolor is intermediate in petal/sepal sizes.  


